{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"marimo for MkDocs","text":"<p>A MkDocs plugin that brings interactive Python code execution to your documentation using marimo.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\u26a1\ufe0f Two flexible ways to embed Python code:</li> <li>Inline Code: Write and execute Python code directly in your Markdown files</li> <li>Playground Embed: Embed full marimo notebooks with the marimo playground</li> <li>\ud83d\udd04 Interactive widgets with real-time updates</li> <li>\ud83d\udcca Seamless integration with data visualization libraries</li> <li>\ud83c\udfa8 Customizable styling to match your documentation theme</li> <li>\ud83d\ude80 Easy to set up and use</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-install-the-plugin","title":"1. Install the plugin","text":"pipuvpixiconda <pre><code>pip install mkdocs-marimo\n</code></pre> <pre><code>uv pip install mkdocs-marimo\n</code></pre> <pre><code>pixi add mkdocs-marimo\n</code></pre> <pre><code>conda install -c conda-forge mkdocs-marimo\n</code></pre>"},{"location":"#2-add-the-plugin-to-your-mkdocsyml","title":"2. Add the plugin to your <code>mkdocs.yml</code>","text":"<pre><code>plugins:\n  - marimo\n</code></pre>"},{"location":"#3-write-interactive-python-code-in-your-markdown-files","title":"3. Write interactive Python code in your Markdown files","text":"<pre><code>```python {marimo}\nimport marimo as mo\n\nname = mo.ui.text(placeholder=\"Enter your name\")\nname\n```\n\n```python {marimo}\nmo.md(f\"Hello, **{name.value or '__'}**!\")\n```\n</code></pre>"},{"location":"#example-interactive-sine-wave","title":"Example: Interactive Sine Wave","text":"<p>Instead of static code blocks, create interactive visualizations:</p> <p></p> <p></p>"},{"location":"#why-mkdocs-marimo","title":"Why mkdocs-marimo?","text":"<ul> <li>Interactive Documentation: Engage your readers with live, interactive code examples.</li> <li>Real-time Feedback: Instantly see the effects of code changes and parameter adjustments.</li> <li>Enhanced Learning: Improve understanding through hands-on experimentation within the documentation.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out our Getting Started guide to learn more about using marimo inside MkDocs.</p>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub Issues: Report bugs or request features</li> <li>Discord: Ask questions and share ideas</li> </ul>"},{"location":"#license","title":"License","text":"<p>mkdocs-marimo is released under the Apache License 2.0.</p>"},{"location":"getting-started/blocks/","title":"Embedding marimo Notebooks with the Playground","text":"<p>This guide covers the second approach to using marimo in your documentation: embedding full marimo notebooks using the marimo playground, like in our own documentation. This approach is ideal when you want to:</p> <ul> <li>Show complete, multi-cell notebooks</li> <li>Allow users to edit and experiment with the code</li> <li>Embed existing .py notebooks</li> </ul> <p>If you're looking for simpler, inline code examples, check out the Quick Start guide's section on inline code.</p> <p>This feature uses <code>pymdownx.blocks</code> to embed marimo notebooks in your MkDocs documentation, creating iframes that render the marimo playground.</p>"},{"location":"getting-started/blocks/#setup","title":"Setup","text":"<p>To use the marimo playground, you need to install the <code>pymdown-extensions</code> package.</p> <pre><code>pip install mkdocs-marimo pymdown-extensions\n</code></pre>"},{"location":"getting-started/blocks/#basic-example","title":"Basic Example","text":"<p>Here's a simple example of embedding a marimo notebook using blocks:</p> <pre><code>/// marimo-embed\n    height: 400px\n    mode: read\n    app_width: medium\n\n```python\n@app.cell\ndef __():\n    import marimo as mo\n\n    name = mo.ui.text(placeholder=\"Enter your name\", debounce=False)\n    name\n    return\n\n@app.cell\ndef __():\n    mo.md(f\"Hello, **{name.value or '__'}**!\")\n    return\n```\n\n///\n</code></pre>"},{"location":"getting-started/blocks/#interactive-plot-example","title":"Interactive Plot Example","text":"<p>Here's an example with an interactive plot:</p> <pre><code>/// marimo-embed\n    height: 800px\n    mode: read\n    app_width: medium\n\n```python\n@app.cell\ndef __():\n    import marimo as mo\n    import numpy as np\n    import matplotlib.pyplot as plt\n\n    # Create interactive sliders\n    freq = mo.ui.slider(1, 10, value=2, label=\"Frequency\")\n    amp = mo.ui.slider(0.1, 2, value=1, label=\"Amplitude\")\n\n    mo.hstack([freq, amp])\n    return\n\n@app.cell\ndef __():\n    # Plot the sine wave\n    x = np.linspace(0, 10, 1000)\n    y = amp.value * np.sin(freq.value * x)\n\n    plt.figure(figsize=(10, 6))\n    plt.plot(x, y)\n    plt.title('Interactive Sine Wave')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.gca()\n    return\n```\n\n///\n</code></pre>"},{"location":"getting-started/blocks/#example-with-hidden-code","title":"Example with Hidden Code","text":"<p>Here's an example that hides the code:</p>"},{"location":"getting-started/blocks/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/blocks/#marimo-embed","title":"marimo-embed","text":"Option Description Values <code>height</code> Controls the height of the embed - Named sizes: <code>small</code> (300px), <code>medium</code> (400px), <code>large</code> (600px), <code>xlarge</code> (800px), <code>xxlarge</code> (1000px)- Custom size: Any pixel value (e.g. <code>500px</code>) <code>mode</code> Controls the interaction mode - <code>read</code>: Read-only view (default)- <code>edit</code>: Allows editing the code <code>app_width</code> Controls the width of the marimo app - <code>medium</code>: Standard width (default)- <code>full</code>: Full width- <code>compact</code>: Narrow width <code>include_code</code> Controls whether code is included in the embed - <code>true</code>: Show code (default)- <code>false</code>: Hide code"},{"location":"getting-started/blocks/#marimo-embed-file","title":"marimo-embed-file","text":"<p>The <code>marimo-embed-file</code> block is used to embed existing marimo files:</p> <p>/// marimo-embed-file     filepath: getting-started/inlined.py     height: 600px     mode: read     show_source: true ///</p> Option Description Default <code>filepath</code> Path to the marimo file to embed Required <code>show_source</code> Whether to show the source code below the embed <code>true</code> <code>include_code</code> Controls whether code is included in the embed <code>true</code>"},{"location":"getting-started/configuration/","title":"Plugin Configuration","text":"<p>The marimo plugin for MkDocs allows you to embed interactive marimo cells in your documentation. You can configure how these cells are rendered using various options.</p>"},{"location":"getting-started/configuration/#global-configuration","title":"Global Configuration","text":"<p>You can set global configuration options for the marimo plugin in your <code>mkdocs.yml</code> file. These options serve as defaults for all marimo code blocks but can be overridden by individual code fence options.</p> <pre><code>plugins:\n  - marimo:\n      enabled: true\n      display_code: false\n      display_output: true\n      is_reactive: true\n      marimo_version: '0.1.0' # Specify the version of marimo to use\n</code></pre>"},{"location":"getting-started/configuration/#available-global-options","title":"Available Global Options","text":"Option Type Description Default enabled boolean Controls whether the marimo plugin is active. <code>true</code> display_code boolean Controls whether the source code is displayed in the rendered output. <code>false</code> display_output boolean Determines if the output of the code execution is included in the rendered HTML. <code>true</code> is_reactive boolean Specifies whether code blocks will run with pyodide, making them interactive in the browser. <code>true</code> marimo_version string Specifies the version of marimo to use. Installed version"},{"location":"getting-started/configuration/#code-fence-options","title":"Code Fence Options","text":"<p>When you create a marimo code fence in your markdown, you can specify options that control how the cell is rendered. These options are placed inside the opening code fence and will override the global configuration for that specific cell.</p> <pre><code>```python {marimo display_code=true display_output=true is_reactive=false}\n# Your marimo code here\n```\n</code></pre>"},{"location":"getting-started/configuration/#available-code-fence-options","title":"Available Code Fence Options","text":"Option Type Description Example display_code boolean Controls whether the source code is displayed in the rendered output. <code>display_code=true</code> display_output boolean Determines if the output of the code execution is included in the rendered HTML. <code>display_output=false</code> is_reactive boolean Specifies whether this code block will run with pyodide, making it interactive in the browser. <code>is_reactive=false</code>"},{"location":"getting-started/configuration/#example","title":"Example","text":"<p>Here's an example of a marimo code fence with all options specified:</p> <pre><code>```python {marimo display_code=true display_output=true is_reactive=false}\nimport marimo as mo\n\nslider = mo.ui.slider(1, 10, value=5)\nmo.md(f\"Change the slider value: {slider}\")\n```\n</code></pre> <p>This will render a marimo cell that displays the source code and shows the output, but is not interactive in the browser (overriding the global <code>is_reactive</code> setting).</p> <p>Remember that options specified in individual code fences will override the global settings for that specific cell.</p>"},{"location":"getting-started/configuration/#releasing-for-maintainers","title":"Releasing (for maintainers)","text":"<p>To release a new version:</p> <ol> <li>Bump the version:</li> </ol> <pre><code># Bump the version\ngit add pyproject.toml\ngit commit -m \"chore: bump version to $(hatch --no-color version)\"\ngit push origin main\n</code></pre> <ol> <li>Create and push a tag:</li> </ol> <pre><code>git tag $(hatch --no-color version)\ngit push origin $(hatch --no-color version)\n</code></pre> <p>This will trigger the GitHub Actions workflow to build and publish the package to PyPI.</p>"},{"location":"getting-started/inline-notebook/","title":"Inline marimo notebooks","text":"Initializing... mo.md(%22You%20can%20also%20embed%20marimo%20apps%20inline%20with%20mkdocs!%22) mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20This%20marimo%20notebook%20was%20embedded%20inline%20with%20mkdocs%2C%20by%20adding%20the%0A%0A%20%20%20%20%60%60%60markdown%0A%20%20%20%20!marimo_file%20%7B__file__%7D%0A%20%20%20%20%60%60%60%0A%20%20%20%20%22%22%22%0A) import%20functools%0A%0Aimport%20matplotlib.pyplot%20as%20plt%0Aimport%20numpy%20as%20np%0A%0A%40functools.cache%0Adef%20plotsin(amplitude%2C%20period)%3A%0A%20%20%20%20x%20%3D%20np.linspace(0%2C%202%20*%20np.pi%2C%20256)%0A%20%20%20%20plt.plot(x%2C%20amplitude%20*%20np.sin(2%20*%20np.pi%20%2F%20period%20*%20x))%0A%20%20%20%20plt.ylim(-2.2%2C%202.2)%0A%20%20%20%20return%20plt.gca()%0A%0Aperiod%20%3D%202%20*%20np.pi%0Aamplitude%20%3D%20mo.ui.slider(1%2C%202%2C%20step%3D0.1%2C%20label%3D%22Amplitude%22)%0Aamplitude%0Amo.show_code(amplitude) mo.show_code(plotsin(amplitude.value%2C%20period)) import%20marimo%20as%20mo"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Add <code>mkdocs-marimo</code> to your <code>pyproject.toml</code> or <code>requirements.txt</code> file or simply install it using <code>pip</code> or <code>pixi</code>. The plugin will automatically install the minimally required version of <code>mkdocs</code> it is compatible with.</p> <pre><code>pip install mkdocs-marimo\n# or\nuv pip install mkdocs-marimo\n# or\npixi add mkdocs-marimo\n</code></pre>"},{"location":"getting-started/installation/#add-the-plugin-to-your-mkdocsyml","title":"Add the plugin to your <code>mkdocs.yml</code>","text":"<pre><code>plugins:\n  - marimo\n</code></pre>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will help you get started with using marimo inside MkDocs. There are two main ways to use marimo in your documentation:</p> <ol> <li>Inline Code: Write Python code directly in your Markdown files using marimo islands</li> <li>Playground Embed: Embed full marimo notebooks using the marimo playground</li> </ol>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ol> <li>Installed the marimo plugin for MkDocs (see Installation)</li> <li>Added the plugin to your <code>mkdocs.yml</code> file</li> </ol>"},{"location":"getting-started/quick-start/#approach-1-inline-code-with-marimo-islands","title":"Approach 1: Inline Code with marimo Islands","text":"<p>This is the simplest way to add interactive Python code to your documentation. Code is written directly in your Markdown files and executed in place.</p>"},{"location":"getting-started/quick-start/#basic-example","title":"Basic Example","text":"<pre><code>```python {marimo}\n2 + 2\n```\n</code></pre> <p>By default, marimo executes the code and displays the result. On page load, marimo re-hydrates the cell state and executes the code again using WebAssembly.</p>"},{"location":"getting-started/quick-start/#interactive-elements","title":"Interactive Elements","text":"<pre><code>```python {marimo}\nimport marimo as mo\nname = mo.ui.text(placeholder=\"Enter your name\", debounce=False)\nname\n```\n\n```python {marimo}\nmo.md(f\"Hello, **{name.value or '__'}**!\")\n```\n</code></pre> <p>This produces:</p> <p></p> <p></p>"},{"location":"getting-started/quick-start/#approach-2-embedding-the-marimo-playground","title":"Approach 2: Embedding the marimo Playground","text":"<p>For more complex notebooks or when you want to provide a full notebook experience, you can embed the marimo playground. This approach requires the <code>pymdown-extensions</code> package.</p> <pre><code>pip install pymdown-extensions\n</code></pre>"},{"location":"getting-started/quick-start/#basic-playground-example","title":"Basic Playground Example","text":"<pre><code>/// marimo-embed\n    height: 400px\n    mode: read\n    app_width: medium\n\n```python\n@app.cell\ndef __():\n    import marimo as mo\n    name = mo.ui.text(placeholder=\"Enter your name\")\n    name\n    return\n\n@app.cell\ndef __():\n    mo.md(f\"Hello, **{name.value or '__'}**!\")\n    return\n```\n\n///\n</code></pre> <p>See Embedding the marimo playground for more details on this approach.</p>"},{"location":"getting-started/quick-start/#which-approach-should-you-choose","title":"Which Approach Should You Choose?","text":"<p>Use Inline Code when:</p> <ul> <li>You want to show simple, focused examples</li> </ul> <p>Use Playground Embed when:</p> <ul> <li>You want to show complete notebooks</li> <li>You want users to be able to edit and experiment with the code</li> <li>You want to embed existing .py notebooks</li> </ul>"},{"location":"getting-started/quick-start/#working-with-data","title":"Working with Data","text":"<p>marimo integrates seamlessly with data analysis libraries. Here's an example using pandas:</p> <pre><code>```python {marimo}\nimport marimo as mo\nimport pandas as pd\ndata = pd.read_csv(\"https://huggingface.co/datasets/scikit-learn/Fish/resolve/main/Fish.csv\")\nmo.ui.table(data, selection=None)\n```\n</code></pre> <p></p>"},{"location":"getting-started/quick-start/#leveraging-reactivity","title":"Leveraging Reactivity","text":"<p>marimo's reactivity allows cells to update automatically when inputs or code changes. Here's a visualization example:</p> <p></p> <p></p>"},{"location":"getting-started/nav_notebook/","title":"Notebooks in Navigation","text":"Initializing... mo.md(%22%22%22%0AYou%20can%20link%20directly%20to%20marimo%20notebooks%2C%20in%20the%20mkdocs.yml%20file.%0A%0AThis%20content%20comes%20from%20a%20marimo%20notebook.%0A%22%22%22) mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20%60%60%60yaml%0A%20%20%20%20nav%3A%0A%20%20%20%20%20%20Examples%3A%0A%20%20%20%20%20%20%20%20-%20Simple%3A%20simple_example.py%0A%20%20%20%20%20%20%20%20-%20Complex%3A%20complex_example.py%0A%20%20%20%20%60%60%60%0A%20%20%20%20%22%22%22%0A) import%20marimo%20as%20mo"}]}